{
  "hash": "5c56a962ee361d8001dc7d46dc78b9fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CFA & Structural Equation Modeling Materials\"\nauthor: \"Brier Gallihugh, M.S.\"\ndate: today\nformat:\n  html:\n    theme: default\n    code-annotations: select\n    self-contained: true\n  pdf: default\nhyperrefoptions:\n  - linktoc=all\ntoc: true\ntoc-location: right\ntoc-depth: 3\nwarning: FALSE\necho: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(5212023)\nlibrary(tidyverse)\nlibrary(lavaan)\nlibrary(psych)\nlibrary(semTools)\nlibrary(semPlot)\n\ndata <- psych::bfi[,16:25] # <1>\n\ncfa_data <- data[sample(nrow(data),300),] # <2>\n\nsem_data <- lavaan::PoliticalDemocracy %>% na.omit() # <3>\n```\n:::\n\n1. Create overall data for CFA\n2. Randomly sample 300 observations from `data` using `sample()` function\n3. Create data for SEM using the `PoliticalDemocracy` data set from the `lavaan` package. Omit missing data using the `na.omit()` function\n\n## Confirmatory Factor Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create CFA Model\ncfa_model <- 'nfactor  =~ N1 + N2 + N3 + N4 + N5\n              ofactor =~ O1 + O2 + O3 + O4 + O5'\n\nfit_cfa <- cfa(cfa_model, data = cfa_data) # <1>\n\nsummary(fit_cfa, fit.measures = TRUE) # <2>\n\nsemPaths(fit_cfa,'std') # <3>\n```\n\n::: {.cell-output-display}\n![](SEM_files/figure-html/cfa example-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlavaan 0.6.15 ended normally after 39 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        21\n\n                                                  Used       Total\n  Number of observations                           284         300\n\nModel Test User Model:\n                                                      \n  Test statistic                               126.828\n  Degrees of freedom                                34\n  P-value (Chi-square)                           0.000\n\nModel Test Baseline Model:\n\n  Test statistic                               785.605\n  Degrees of freedom                                45\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.875\n  Tucker-Lewis Index (TLI)                       0.834\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -4737.244\n  Loglikelihood unrestricted model (H1)      -4673.830\n                                                      \n  Akaike (AIC)                                9516.489\n  Bayesian (BIC)                              9593.117\n  Sample-size adjusted Bayesian (SABIC)       9526.525\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.098\n  90 Percent confidence interval - lower         0.080\n  90 Percent confidence interval - upper         0.117\n  P-value H_0: RMSEA <= 0.050                    0.000\n  P-value H_0: RMSEA >= 0.080                    0.952\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.084\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)\n  nfactor =~                                          \n    N1                1.000                           \n    N2                0.979    0.067   14.513    0.000\n    N3                0.809    0.071   11.478    0.000\n    N4                0.794    0.070   11.382    0.000\n    N5                0.746    0.076    9.796    0.000\n  ofactor =~                                          \n    O1                1.000                           \n    O2               -0.580    0.159   -3.635    0.000\n    O3                1.314    0.250    5.249    0.000\n    O4                0.266    0.125    2.134    0.033\n    O5               -0.799    0.158   -5.051    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(>|z|)\n  nfactor ~~                                          \n    ofactor          -0.070    0.072   -0.967    0.333\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)\n   .N1                0.838    0.109    7.720    0.000\n   .N2                0.759    0.101    7.491    0.000\n   .N3                1.442    0.139   10.387    0.000\n   .N4                1.424    0.137   10.427    0.000\n   .N5                1.921    0.175   10.953    0.000\n   .O1                0.879    0.115    7.630    0.000\n   .O2                2.025    0.177   11.468    0.000\n   .O3                0.595    0.158    3.769    0.000\n   .O4                1.415    0.120   11.787    0.000\n   .O5                1.583    0.147   10.733    0.000\n    nfactor           1.779    0.224    7.947    0.000\n    ofactor           0.491    0.125    3.932    0.000\n```\n\n\n:::\n:::\n\n1. Run a CFA on the model above using the `cfa()` function\n2. Generate CFA output and fit measures using the `summary()` function with the `fit.measures` argument set to `TRUE`\n3. Create a basic path diagram of the CFA model using the `semPaths()` function with standardized coefficients using the `std` argument\n\n:::{.callout-tip}\nFor SEM and CFA models, the =~ syntax is used. You can interpret it as an \"equals\" sign more or less\n:::\n\n## Structural Equation Modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create SEM Model\nsem_model <- 'ind60 =~ x1 + x2 + x3\n    dem60 =~ y1 + y2 + y3 + y4\n    dem65 =~ y5 + y6 + y7 + y8\n    dem60 ~ ind60\n    dem65 ~ ind60 + dem60\n    y1 ~~ y5\n    y2 ~~ y4 + y6\n    y3 ~~ y7\n    y4 ~~ y8\n    y6 ~~ y8'\n\nfit_sem <- sem(sem_model, data = sem_data) # <1>\nsummary(fit_sem, standardized = TRUE, fit.measures = TRUE) # <2>\nsemPaths(fit_sem,'std') # <3>\n```\n\n::: {.cell-output-display}\n![](SEM_files/figure-html/sem example-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlavaan 0.6.15 ended normally after 68 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        31\n\n  Number of observations                            75\n\nModel Test User Model:\n                                                      \n  Test statistic                                38.125\n  Degrees of freedom                                35\n  P-value (Chi-square)                           0.329\n\nModel Test Baseline Model:\n\n  Test statistic                               730.654\n  Degrees of freedom                                55\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.995\n  Tucker-Lewis Index (TLI)                       0.993\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -1547.791\n  Loglikelihood unrestricted model (H1)      -1528.728\n                                                      \n  Akaike (AIC)                                3157.582\n  Bayesian (BIC)                              3229.424\n  Sample-size adjusted Bayesian (SABIC)       3131.720\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.035\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.092\n  P-value H_0: RMSEA <= 0.050                    0.611\n  P-value H_0: RMSEA >= 0.080                    0.114\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.044\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  ind60 =~                                                              \n    x1                1.000                               0.670    0.920\n    x2                2.180    0.139   15.742    0.000    1.460    0.973\n    x3                1.819    0.152   11.967    0.000    1.218    0.872\n  dem60 =~                                                              \n    y1                1.000                               2.223    0.850\n    y2                1.257    0.182    6.889    0.000    2.794    0.717\n    y3                1.058    0.151    6.987    0.000    2.351    0.722\n    y4                1.265    0.145    8.722    0.000    2.812    0.846\n  dem65 =~                                                              \n    y5                1.000                               2.103    0.808\n    y6                1.186    0.169    7.024    0.000    2.493    0.746\n    y7                1.280    0.160    8.002    0.000    2.691    0.824\n    y8                1.266    0.158    8.007    0.000    2.662    0.828\n\nRegressions:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  dem60 ~                                                               \n    ind60             1.483    0.399    3.715    0.000    0.447    0.447\n  dem65 ~                                                               \n    ind60             0.572    0.221    2.586    0.010    0.182    0.182\n    dem60             0.837    0.098    8.514    0.000    0.885    0.885\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n .y1 ~~                                                                 \n   .y5                0.624    0.358    1.741    0.082    0.624    0.296\n .y2 ~~                                                                 \n   .y4                1.313    0.702    1.871    0.061    1.313    0.273\n   .y6                2.153    0.734    2.934    0.003    2.153    0.356\n .y3 ~~                                                                 \n   .y7                0.795    0.608    1.308    0.191    0.795    0.191\n .y4 ~~                                                                 \n   .y8                0.348    0.442    0.787    0.431    0.348    0.109\n .y6 ~~                                                                 \n   .y8                1.356    0.568    2.386    0.017    1.356    0.338\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .x1                0.082    0.019    4.184    0.000    0.082    0.154\n   .x2                0.120    0.070    1.718    0.086    0.120    0.053\n   .x3                0.467    0.090    5.177    0.000    0.467    0.239\n   .y1                1.891    0.444    4.256    0.000    1.891    0.277\n   .y2                7.373    1.374    5.366    0.000    7.373    0.486\n   .y3                5.067    0.952    5.324    0.000    5.067    0.478\n   .y4                3.148    0.739    4.261    0.000    3.148    0.285\n   .y5                2.351    0.480    4.895    0.000    2.351    0.347\n   .y6                4.954    0.914    5.419    0.000    4.954    0.443\n   .y7                3.431    0.713    4.814    0.000    3.431    0.322\n   .y8                3.254    0.695    4.685    0.000    3.254    0.315\n    ind60             0.448    0.087    5.173    0.000    1.000    1.000\n   .dem60             3.956    0.921    4.295    0.000    0.800    0.800\n   .dem65             0.172    0.215    0.803    0.422    0.039    0.039\n```\n\n\n:::\n:::\n\n1. Run an SEM model using the `sem()` function\n2. Generate a summary of the SEM model with standardized results and fit measures using the `summary()` function with the `standardized` and `fit.measures()` arguments set to `TRUE`\n3. Generate a basic path diagram of the SEM model usign the `semPaths()` function with standardized coefficients using the `std` argument.\n\n:::{.callout-tip}\nAs stated above, for SEM models we want the =~ syntax. For reference, a regression syntax is simply ~ while residuals syntax are ~~. Each of these can as with SEM, be interpreted as an \"equals\" sign.\n:::",
    "supporting": [
      "SEM_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}