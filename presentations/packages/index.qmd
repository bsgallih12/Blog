---
title: "R Packages: The Basics"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
    theme: Christmas.scss
image: packages.png
---

## What Are Packages?

- R is primarily (now) a function based programming language. In other words, it relies on functions (think math) that take arguments and output something (e.g., variables and an ANOVA table) based on the input
- `Packages` are outside collections of functions meant to do specific things (e.g., data wrangling, manipulation, analysis, visualization, etc.)
- CRAN is the primary location of packages (that undergo testing for functionality)
  - However, many post beta (or developmental) updated versions of packages on GitHub first

# The Tidyverse

## What Is The `tidyverse` Package?

- A collection of packages for the purposes of data wrangling, manipulation and visualization
- Require that data is "tidy" meaning that each row of a data set corresponds to **one** observation
  - This means most between subjects data sets are already usually "tidy" in nature
  - However, within subjects designs are largely not tidy


## Dplyr

- Primarily used for data wrangling and manipulation of data
- Useful functions include `group_by`, `summarize` and `mutate`
- Let's look at an example

## Example (Creating Variables)

```{r dplyr example variable}
#| echo: true
#| output: true
library(tidyverse)

starwars %>% 
  select(name,height,mass,eye_color) %>%  
  mutate(mass_dbl = mass * 2) %>% 
  head(5)
```

## Example (Group Summary Statistics)

```{r dplyr example summary}
#| echo: true
#| output: true
starwars %>% 
  na.omit(mass) %>% 
  select(name,height,mass,eye_color) %>% 
  mutate(eye_color = as.factor(eye_color)) %>% 
  group_by(eye_color) %>% 
  summarize(mass_mean = mean(mass, na.rm = TRUE),
            mass_sd = sd(mass,na.rm = TRUE),
            mass_min = min(mass),
            mass_max = max(mass)) %>% 
  head(5)
```

## Ggplot2

- The mother of like 99% of the R based data visualizations you'll see in publications
- Highly flexible and customization is almost limitless (with enough practice)
- Massive amount of "add on" packages for different visualizations
  - Many of these wont be used in APA journals but they may be useful in industry

## Bar Plot Example

```{r barplot ggplot2}
#| echo: true
#| output: false
library(tidyverse)
library(ggtext)

bar_graph <- starwars %>% 
  select(eye_color,mass) %>% 
  filter(eye_color != "orange") %>% 
  na.omit(mass) %>% 
  group_by(eye_color) %>% 
  summarize(mean = mean(mass, na.rm = TRUE),
            sd = sd(mass, na.rm = TRUE),
            min = min(mass, na.rm = TRUE),
            max = max(mass, na.rm = TRUE),
            upper = mean  + sd,
            lower = mean - sd,
            n = n()) %>% mutate(eye_color = as.factor(eye_color)) %>% 
  ggplot(aes(x = reorder(eye_color,-mean), y = mean, ymax = upper, ymin = lower)) +
  geom_col(show.legend = FALSE, fill = "#2C73A8") +
  geom_errorbar(width = .60)

```

##  Output

```{r bargraph output1}
#| output: true
bar_graph
```

## Modify Bar Graph

```{r modified bar code}
#| echo: true
#| output: false
bar_graph <- bar_graph +
  labs(title = "**Figure 1**. Average Mass By Eye Color",
       x = "Eye Color",
       y = "Mean Mass",
       caption = "**Note**: Error bars are calculated using *SD*") + 
  theme_classic() + 
  theme(plot.caption = element_markdown(hjust = 0),
        plot.title = element_markdown())
```

## Modify Bar Graph Output

```{r modified bar output}
#| echo: false
#| output: true
bar_graph
```

## Point Graph Example

```{r point plot ggplot2}
#| output: false
#| echo: true
library(tidyverse)
library(ggtext)

point_graph <- starwars %>% 
  select(eye_color,mass) %>% 
  filter(eye_color != "orange") %>% 
  na.omit(mass) %>% 
  group_by(eye_color) %>% 
  summarize(mean = mean(mass, na.rm = TRUE),
            sd = sd(mass, na.rm = TRUE),
            min = min(mass, na.rm = TRUE),
            max = max(mass, na.rm = TRUE),
            upper = mean  + sd,
            lower = mean - sd,
            n = n()) %>% mutate(eye_color = as.factor(eye_color)) %>% 
  ggplot(aes(x = reorder(eye_color,-mean), y = mean, ymax = upper, ymin = lower)) +
  geom_errorbar(width = .60) +
  geom_point(show.legend = FALSE, color = "#2C73A8")
  
```

## Line Plot Example

```{r line plot ggplot2}
point_graph
```

## Modified Line Graph Code

```{r modified point graph code}
#| echo: true
#| output: false
point_graph <- point_graph +
  labs(title = "**Figure 1**. Average Mass By Eye Color",
       x = "Eye Color",
       y = "Mean Mass",
       caption = "**Note**: Error bars are calculated using *SD*") + 
  theme_classic() + 
  theme(plot.caption = element_markdown(hjust = 0),
        plot.title = element_markdown())
```

## Point Modified Output

```{r point graph output2}
point_graph
```

## Violin Plot Example

```{r violin plot ggplot2}
#| output: false
#| echo: true

library(tidyverse)
library(ggtext)

violin_graph <- starwars %>% 
  select(eye_color,mass) %>% 
  filter(eye_color != "orange") %>% 
  mutate(eye_color = as.factor(eye_color)) %>% 
  na.omit(mass) %>% 
  ggplot(aes(x = eye_color, y = mass, fill = eye_color)) +
  geom_violin(show.legend = FALSE)
```

## Violin Plot Output

```{r violin output}
#| output: true
#| echo: false
violin_graph
```

## Violin Plot Modifed Code

```{r violin code modified}
#| echo: true
#| output: false
violin_graph <- violin_graph +
  labs(title = "**Figure 1**. Mass Distribution Density By Eye Color",
       x = "Eye Color",
       y = "Mean Mass",
       caption = "**Note**: Error bars are calculated using *SD*") + 
  theme_classic() + 
  theme(plot.caption = element_markdown(hjust = 0),
        plot.title = element_markdown())
```

## Violin Plot Modified Output

```{r modified violin output}
#| echo: false
#| output: true
violin_graph
```

# Other Packages

## Psych Package

- Maybe the most useful package for psychologists in particular
- Multiple functions for descriptive statistics at the variable level including the `describe` function
- Robust documentation for what it can do
- Let's demonstrate using that function with the *starwars* data set

## Example

```{r psych package example}
#| echo: true
#| output: true
library(tidyverse)
library(psych)

describe(starwars$mass)
```












