{
  "hash": "ca8cf9761e403a1d4da0826fe2788866",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Non-Parametric Tests Materials\"\nauthor: \"Brier Gallihugh, M.S.\"\ndate: today\nformat:\n  html:\n    theme: default\n    code-annotations: select\n    self-contained: true\n  pdf: default\nhyperrefoptions:\n  - linktoc=all\ntoc: true\ntoc-location: right\ntoc-depth: 3\nwarning: FALSE\necho: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(10311993)\nlibrary(tidyverse)\nlibrary(psych)\nlibrary(palmerpenguins)\n\ndata <- palmerpenguins::penguins %>% dplyr::select(island,body_mass_g) %>% # <1>\n  dplyr::filter(island == \"Biscoe\" | island == \"Dream\") %>% na.omit() # <2>\n\ndata <- droplevels(data) # <3>\n```\n:::\n\n1. Take the `palmerpenguins` data set and use the `select` function to isolate the island and body_mass_g variables\n2. Use the `filter()` function to select for only observations where the island variable is \"Biscoe\" or \"Dream\" and omit any missing data after using the `na.omit()` function.\n3. Use the `droplevels()` function to ensure factor levels no longer present are excluded from analysis.\n\n## Independent Sample T Test (i.e., Wilcoxon’s Rank-Sum Test)^1^\n\n:::{.callout-tip}\n1. This is computationally the same as the Mann-Whitley test (Field et al, 2012)\n:::\n\n:::{.callout-caution}\nNon-parametric tests are NOT less powerful than their parametric counterpart as long as the distribution of interest is not normally distributed (Field et al, 2012)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Two-Tailed (one-tailed \"greater\" diff is + OR \"lesser\" diff is -)\n# Correction for p value (TRUE by default, but can change to FALSE correction = FALSE)\nind_t_nonpar <- wilcox.test(body_mass_g ~ island, data = data) # <1>\nind_t_nonpar # <2>\n\n# Effect Size (from Field et al, 2012)\n\nrFromWilcox<-function(wilcoxModel, N) # <3>\n{ # <3>\nz<- qnorm(wilcoxModel$p.value/2) # <3>\nr<- z/ sqrt(N) # <3>\nreturn(r) # <3>\n} # <3>\n\nrFromWilcox(ind_t_nonpar,291) # <4>\n\n# Typical reporting for non-parametric involves median values\ndescriptive_stats <- data %>% # <5>\n  group_by(island) %>%  # <5>\n  summarize(group_size = n(), # <6>\n            median = median(body_mass_g),# <6>\n            mean = round(mean(body_mass_g, na.rm = TRUE),2), # <6>\n            sd = round(sd(body_mass_g, na.rm = TRUE),2)) # <6>\n\nprint(descriptive_stats) # <7>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  body_mass_g by island\nW = 17741, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n[1] -0.610081\n# A tibble: 2 × 5\n  island group_size median  mean    sd\n  <fct>       <int>  <dbl> <dbl> <dbl>\n1 Biscoe        167  4775  4716.  783.\n2 Dream         124  3688. 3713.  417.\n```\n\n\n:::\n:::\n\n1. Initiate a non parametric independent samples t test using the `wilcox.test()` function.\n2. Show the output of the independent sample non-parametric t test\n3. Create a pseudo effect size measure for non parametric tests courtesy of Field et al (2012).\n4. Generate an effect size measure *r* using the function defined above. The function requires you provide the wilcox.test object and the sample size\n5. Generate some simple descriptive statistics for reporting purposes grouped by island affiliation\n6. Several statistics included such as sample size, mean, median, and standard deviation.\n7. Show the output of the above calculations using the `print()` function.\n\n## Dependent Sample T Test (i.e., Wilcoxon Signed-Rank Test)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- psych::sat.act %>% # <1>\n  mutate(condition = rep(c(1,2),350), # <1>\n         ACT_2 = if_else(age < 39, ACT + 3, ACT -1)) # <1>\n\ndata_condition1 <- data %>%  # <2>\n  filter(condition == 1) # <2>\n\ndata_condition2 <- data %>% # <3>\n  filter(condition == 2) # <3>\n\ncondition1_test <- wilcox.test(data_condition1$ACT, # <4>\n                           data_condition1$ACT_2, # <4>\n                           paired = TRUE, # <4>\n                           correct = FALSE) # <4>\n\ncondition2_test <- wilcox.test(data_condition2$ACT, # <5>\n                           data_condition2$ACT_2, # <5>\n                           paired = TRUE, # <5>\n                           correct = FALSE) # <5>\n\nprint(condition1_test) # <6>\nprint(condition2_test) # <6>\n\n# Effect Size\nrFromWilcox(condition1_test,350) # <7>\nrFromWilcox(condition2_test,350) # <7>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon signed rank test\n\ndata:  data_condition1$ACT and data_condition1$ACT_2\nV = 666, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n\n\tWilcoxon signed rank test\n\ndata:  data_condition2$ACT and data_condition2$ACT_2\nV = 666, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n[1] -0.9363034\n[1] -0.9363034\n```\n\n\n:::\n:::\n\n1. Create a dependent samples t test data set\n2. Filter data by condition variable (`condition = 1`) using the `filter()` function\n3. Filter data by condition variable (`condition = 2`) using the `filter()` function\n4. Run a `wilcox.test()` function for `condition = 1`. You want to include the time1 and time2 measures. The `paired = TRUE` tells R that this is a dependent sample t test\n5. Do the same for the `condition = 2` condition.\n6. The `print()` function will give you the results for the non parametric dependent sample t test\n7. Use the function shown earlier by Fields et al (2012) to calculate an effect size. It takes the same arguments as before.\n\n\n## One Way ANOVA (i.e., Kruskal–Wallis Test)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2 <- psych::sat.act[1:600,] %>% # <1>\n  mutate(condition = as.factor(rep(c(1:3),200)), # <1>\n         rank = rank(ACT)) # <1>\n\n# Condition 3 is control\n\nkruskal.test(ACT ~ condition, data = data2) # <2>\n\npgirmess::kruskalmc(ACT ~ condition, data = data2) # <3>\n\n# Maybe we want to see the ranked means\n\nby(data2$rank,data2$condition,mean) # <4>\n\n# Maybe we just want to compare each exp group to the control (Lowers Odds of Type II error).\n# We can do that. But we need it to be the first level factor\n\ndata2$condition <- relevel(data2$condition,3) # <5>\n\nlevels(data2$condition) # <6>\n\npgirmess::kruskalmc(ACT ~ condition, data = data2, cont = \"two-tailed\") # <7>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tKruskal-Wallis rank sum test\n\ndata:  ACT by condition\nKruskal-Wallis chi-squared = 2.4489, df = 2, p-value = 0.2939\n\nMultiple comparison test after Kruskal-Wallis \nalpha: 0.05 \nComparisons\n    obs.dif critical.dif stat.signif\n1-2 20.7875     41.49949       FALSE\n1-3 25.4050     41.49949       FALSE\n2-3  4.6175     41.49949       FALSE\ndata2$condition: 1\n[1] 285.1025\n------------------------------------------------------------ \ndata2$condition: 2\n[1] 305.89\n------------------------------------------------------------ \ndata2$condition: 3\n[1] 310.5075\n[1] \"3\" \"1\" \"2\"\nMultiple comparison test after Kruskal-Wallis, treatments vs control (two-tailed) \nalpha: 0.05 \nComparisons\n    obs.dif critical.dif stat.signif\n3-1 25.4050     38.85457       FALSE\n3-2  4.6175     38.85457       FALSE\n```\n\n\n:::\n:::\n\n1. Create a dummy data set\n2. Run a non parametric ANOVA using the `kruskal.test()` function\n3. Run a posthoc multiple comparisons test using the `kruskalmc()` function\n4. Show \"means\" using the `by()` function. It takes the rank and condition variables as well as the `mean()` function \n5. Sort levels so that the main comparison condition is first using the `relevel()` function. It takes your condition variable as well as the factor you want first (in this case 3).\n6. The `levels() function confirms that our ordering is correct (i.e., 3,1,2)\n7. Use the `kuskalmc()` function with the `cont` argument set to \"two-tailed\" for planned comparison\n\n## Repeated Measures ANOVA (i.e., Friedman's ANOVA)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3 <- data2 %>% # <1>\n  mutate(ACT_2 = if_else(age < 39, ACT + 3, ACT -1)) %>% select(ACT,ACT_2) # <1>\n\n# Test\nfriedman.test(as.matrix(data3)) # <2>\n\n# Post Hoc\npgirmess::friedmanmc(as.matrix(data3)) # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tFriedman rank sum test\n\ndata:  as.matrix(data3)\nFriedman chi-squared = 377.63, df = 1, p-value < 2.2e-16\n\nMultiple comparisons between groups after Friedman test \nalpha: 0.05 \nComparisons\n    obs.dif critical.dif stat.signif     p.value\n1-2     476     48.00912        TRUE 1.22687e-83\n```\n\n\n:::\n:::\n\n1. Create a repeated measures ANOVA dummy data set\n2. Run a repeated measures non parametric ANOVA using the `friedman.test()` function. Note that the `as.matrix()` function is required for the test to run properly.\n3. Run a posthoc test using the `friedmanmc()` function.\n\n:::{.callout-tip}\nFor the Friedman test, the function requires that ONLY the variables needed for the analysis are included in the data frame\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}